#pragma once

// This file is generated by Jack

#include <cstdint>
#include <RED4ext/Common.hpp>
#include <RED4ext/NativeTypes.hpp>
#include <RED4ext/Scripting/Natives/Generated/WorldTransform.hpp>

namespace RED4ext::vehicle
{

    
struct MaterialResource {
    ResRef skidMarks;
    ResRef tireTracks;
    bool loaded;
    uint8_t extra_byte_for_fun;
};

struct MaterialCondition {
    MaterialResource particle;
    MaterialResource decal;
};

struct MaterialFx {
    MaterialCondition normal;
    MaterialCondition wet;
    MaterialCondition rain;
};

// effects
struct Effects {

    struct Unk30 {
        // some transform storage
        Handle<void*> unk00;
        Handle<void*> unk10;
        Handle<void*> unk20;
        Handle<void*> unk30;
        // some material lookup for smear distances
        HashMap<CName, float> unk40;
        Handle<world::EffectBlackboard> effectBlackboard;
    };

    struct Unk40 {
        Transform unk00;
        Vector4 unk20;
        // .physmat etc
        CName physicalMaterial;
        uint8_t unk38;
        uint32_t unk3C;
        Vector3 unk40;
        float unk4C;
        float unk50;
        WorldPosition decalNormal;
        Vector3 unk60;
        float wheelAngularSpeed;
        float visualDisplacementClamped;
        float wheelLatSlip;
        float wheelLongSlip;
        bool isUnderwater;
        bool condition;
        uint8_t unk7E[2];
    };

    RED4EXT_ASSERT_SIZE(Unk40, 0x80);

    // default values taken from TweakDB
    struct FxSettings {
        float decalNormalOffset = 0.05;
        float impactNormalForceThreshold = 1.0;
        float impactTangentialForceThreshold = 1.0;
        float wheelAngularSpeedThreshold = 0.03;
        float wheelLongSlipThreshold = 2.0;
        float wheelLatSlipThreshold = 2.5;
        float scratchPositionTolerance = 0.1;
        float minTimeBetweenImpulses = 0.1;
        float minDistanceBetweenImpulses = 0.2;
        float impulseRadius_Min = 0.2;
        float impulseRadius_Max = 0.6;
        float impulseStrength_Min = 0.0007;
        float impulseStrength_Max = 0.001;
        float rainMoistureThreshold = 0.2;
        CName paramImpactForce = "veh_impact_force";
        CName paramScratchForce = "veh_scratch_force";
        CName paramLongSlip = "veh_long_slip";
        CName paramLatSlip = "veh_lat_slip";
        CName paramTotalSlip = "veh_total_slip";
        CName paramVehicleSpeed = "veh_speed";
        CName paramWheelAngularSpeed = "veh_wheel_angular_speed";
        CName paramEngineRPM = "veh_engine_rpm";
        float paramImpactForce_Max = 20.0;
        float paramScratchForce_Max = 20.0;
        float paramLongSlip_Max = 15.0;
        float paramLatSlip_Max = 6.0;
        float paramWheelLongSlip_Min;
        float paramWheelLongSlip_Max;
        float paramWheelLatSlip_Min;
        float paramWheelLatSlip_Max;
        float paramTotalSlip_Min;
        float paramTotalSlip_Max;
        float paramVehicleSpeed_Min = 0.0;
        float paramVehicleSpeed_Max = 120.0;
        float paramWheelAngularSpeed_Min = 0.0;
        float paramWheelAngularSpeed_Max = 90.0;
        float paramEngineRPM_Min = 0.0;
        float paramEngineRPM_Max = 4800.0;
    };

    // struct FxLookup {
    //     CName skid_marks_particle;
    //     CName tire_tracks_particle;
    //     bool particles_loaded;
    //     bool extra_byte_for_fun;
    //     CName skid_marks_decal;
    //     CName tire_tracks_decal;
    //     bool decals_loaded;
    //     CName wet_skid_marks_particle;
    //     CName wet_tire_tracks_particle;
    //     bool wet_particles_loaded;
    //     CName wet_skid_marks_decal;
    //     CName wet_tire_tracks_decal;
    //     bool wet_decals_loaded;
    //     CName rain_skid_marks_particle;
    //     CName rain_tire_tracks_particle;
    //     bool rain_particles_loaded;
    //     CName rain_skid_marks_decal;
    //     CName rain_tire_tracks_decal;
    //     bool rain_decals_loaded;
    // };


    struct CollisionFxLookup {
        CName impact_particles;
        CName impact_decal;
        CName scratch_particles;
        CName scratch_decal;
    };

    struct SmearFxLookup {
        CName skid_marks_decal;
        CName tire_tracks_decal;
        bool loaded;
        uint32_t unk1C;
        float distance;
    };

    // 1.52 RVA: 0x1CFA220 / 30384672
    //           48 89 5C 24 10 4C 89 4C 24 20 55 56 57 41 54 41 55 41 56 41 57 48 8D AC 24 E0 F9 FF FF 48 81 EC
    // 1.6  RVA: 0x1D27B90 / 30571408
    // 1.61hf1 RVA: 0x1D28650
    /// @pattern 48 89 5C 24 10 4C 89 4C 24 20 48 89 4C 24 08 55 56 57 41 54 41 55 41 56 41 57 48 8D AC 24 30 FD
    void __fastcall Setup(__int64 fxCollisionRecord, __int64 fxWheelsRecord, __int64 fxWheelsDecalsRecord);

    // adds things to unk20 for each wheel
    // 1.6  RVA: 0x1D2A340 / 30581568
    /// @pattern 48 8B C4 89 50 10 55 48 8D A8 78 FE FF FF 48 81 EC 80 02 00 00 41 80 78 7C 00 48 89 58 20 48 89
    void __fastcall ProcessEffects(unsigned int wheelIndex, Unk40 *unk40, float deltaTime);

    // 1.6  RVA: 0x1D271C0 / 30568896
    /// @pattern 48 8B C4 55 41 55 41 57 48 8D 6C 24 90 48 81 EC 70 01 00 00 44 8B 41 4C 4C 8B E9 48 89 58 E0 48
    void __fastcall UpdateEffectsBlackboard(unsigned int wheelCount);

    // 1.6  RVA: 0x1D2A340 / 30581568
    /// @pattern 48 8B C4 89 50 10 55 48 8D A8 78 FE FF FF 48 81 EC 80 02 00 00 41 80 78 7C 00 48 89 58 20 48 89
    void __fastcall WheelEffectUpdate(unsigned int wheelIndex, Unk40 *unk40, float deltaTime);

    // 1.6  RVA: 0x1D241A0 / 30556576
    /// @pattern 48 89 5C 24 08 48 89 7C 24 10 4C 8D 89 D0 00 00 00 4C 8B C2 41 8B 59 08 48 8B F9 85 DB 0F 84 BC
    CollisionFxLookup *__fastcall GetCollisionFxForMaterial(CName material);

    // 1.6  RVA: 0x1D24320 / 30556960
    /// @pattern 48 89 5C 24 08 4C 8B CA 48 8B D9 45 84 C0 75 0D 44 38 81 60 01 00 00 74 04 B0 01 EB 02 32 C0 84

    // post 2.0
    /// @pattern 48 89 5C 24 08 48 89 54 24 10 57 48 83 EC 50 48 8B F9 45 84 C0 75 09 44 38 81 60 01 00 00 75 6A
    // MaterialFx * __fastcall GetFxForMaterial(CName material, bool isBackWheel);

    // 1.6  RVA: 0x1D24290 / 30556816
    /// @pattern 4C 8B CA 45 84 C0 75 0D 44 38 81 60 01 00 00 74 04 B0 01 EB 02 32 C0 84 C0 BA 30 01 00 00 41 B8

    // post 2.0
    /// @pattern 48 89 54 24 10 48 83 EC 28 48 8B D1 45 84 C0 75 09 44 38 81 60 01 00 00 75 39 32 C0 F6 D8 4C 8D
    SmearFxLookup *__fastcall GetSmearFxForMaterial(CName material, bool isBackWheel);
    
    // 1.6  RVA: 0x1D25A50 / 30562896
    /// @pattern 48 8B C4 48 89 58 08 48 89 70 18 48 89 78 20 48 89 50 10 55 41 54 41 55 41 56 41 57 48 8D A8 98
    void __fastcall ProcessImpactScratch(Vector3 *a2, Vector3 *offset, Vector3 *a4, Vector3 *a5, float impact, float scratch, CName material);

    // 1.6  RVA: 0x1D2B870 / 30586992
    /// @pattern 48 89 5C 24 08 48 89 74 24 10 48 89 7C 24 18 4C 89 4C 24 20 55 41 54 41 55 41 56 41 57 48 8D AC
    /// @nth 1/4

    // // post 2.0
    // /// @pattern 48 8B C4 48 89 58 08 48 89 70 10 48 89 78 18 4C 89 48 20 55 41 54 41 55 41 56 41 57 48 8D 68 A8
    // /// @nth 0/2
    // bool __fastcall TireTrackEffectStart(Unk30 *a2, MaterialFx *fxLookup, Transform *a4, Transform *a5, bool physicalMaterialChange, bool conditionChange, bool condition);

    // // 1.6  RVA: 0x1D2AF10 / 30584592
    // /// @pattern 48 89 5C 24 08 48 89 74 24 10 48 89 7C 24 18 4C 89 4C 24 20 55 41 54 41 55 41 56 41 57 48 8D AC
    // /// @nth 0/4

    // // post 2.0
    // /// @pattern 48 8B C4 48 89 58 08 48 89 70 10 48 89 78 18 4C 89 48 20 55 41 54 41 55 41 56 41 57 48 8D 68 A8
    // /// @nth 1/2
    // bool __fastcall SkidMarkEffectStart(Unk30 *unk30, MaterialFx *fxLookup, Transform *a4, Transform *a5, bool physicalMaterialChange, bool conditionChange, bool condition);


    BaseObject *vehicle;
    void *animationController;
    // Handle<anim::AnimFeature_VehiclePassenger> vehiclePassenger;
    Handle<void*> vehiclePassenger;
    DynArray<Handle<world::EffectBlackboard>> unk20;
    DynArray<Unk30> unk30;
    DynArray<Unk40> unk40;
    Handle<world::EffectBlackboard> unk50;
    DynArray<void*> unk60;
    // list of collision effects
    DynArray<void*> unk70;
    Handle<world::EffectBlackboard> veh_engine_throttle_input;
    Handle<world::EffectBlackboard> veh_motion_blur_scale;
    world::RuntimeSystemEffects* runtimeSystemEffects;
    FxSettings* fxSettings;
    DynArray<Vector4> unkB0;
    DynArray<Vector3> unkC0;
    // unkD0, collision effects
    HashMap<CName, CollisionFxLookup> collisionFxLookup;
    // unk100, all materials used in wheel fx, maybe by CName, paired wtih unk168, ref'd in GetEffectsForMaterial
    HashMap<CName, MaterialFx> fxLookup;
    // unk130, wheel fx, paired with unk198, ref'd in GetEffectsForMaterial_2
    HashMap<CName, SmearFxLookup> smearFxLookup;
    uint64_t physMaterial;
    // unk168, front override of unk100
    HashMap<CName, MaterialFx> fxLookupFront;
    // unk198, front override of unk130
    HashMap<CName, SmearFxLookup> smearFxLookupFront;
    CName defaultMaterial;
    DynArray<Handle<void*>> unk1D0;
};

RED4EXT_ASSERT_SIZE(Effects, 0x1E0);
RED4EXT_ASSERT_SIZE(Effects::Unk30, 0x80);
RED4EXT_ASSERT_SIZE(Effects::Unk40, 0x80);

}