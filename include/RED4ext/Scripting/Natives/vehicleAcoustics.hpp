#pragma once

// This file is generated by Jack

#include <cstdint>
#include <RED4ext/Common.hpp>
#include <RED4ext/NativeTypes.hpp>
#include <RED4ext/Scripting/Natives/Generated/WorldTransform.hpp>

namespace RED4ext::vehicle
{

struct Acoustics;
    
struct TireUpdate
{
  void *__vftable;
  float unk08;
  float unk0C;
  float veh_tire_surface;
  float veh_tire_lat_slip_ratio;
  float veh_tire_long_slip_ratio;
  float skidValue;
  float skidValue2;
  float unk24;
  uint8_t veh_tire_contact;
  uint8_t unk29;
  uint8_t veh_tire_water;
  uint8_t unk2B;
  uint8_t unk2C;
  uint8_t unk2D;
  uint8_t unk2E;
  uint8_t unk2F;
};

struct WheelUpdate
{
  TireUpdate tireUpdate[4];
  uint64_t unk100[36];
  uint32_t numWheels;
  uint32_t unk1E4;
  uint64_t unk1E8;
  WorldTransform unk1F0;
  Handle<void*> unk210;
  Vector4 unk220;
  uint64_t unk230[2];
  Vector3 unk240;
  uint32_t unk24C;
  Vector4 linearVelocity;
  Vector4 position;
  float unk270;
  float unk274;
  float unk278;
  float unk27C;
  bool throttleValue2;
  float brakeValue;
  float unk288[2];
  float unk290;
  float unk294;
};

struct TireParameterUpdate
{
    Acoustics *acoustics;
    ent::EntityID entityID;
    struct Variables {
        float skidValue;
        uint32_t wheelIndex;
        RED4ext::CName emitterName;
    } * variables;
    float *veh_tire_surface_value;
};

struct EntityEmitter {
    CName emitterName;
    uint32_t id;
    uint32_t unk;
};

struct EntityEmitters {
    ent::EntityID entityID;
    struct Emitter {
        CName *** emitterName1;
        CName *** emitterName2;
    } * emitter;
    void * unk10;
    float unk18;
    float unk20;
};

struct Acoustics
{
    // 1.52 RVA: 0x1C3A0B0 / 29597872
    /// @pattern 80 E2 01 88 91 CA 03 00 00 C3
    void __fastcall Update3CA(bool a2);

    // 1.52 RVA: 0x1C370D0 / 29585616
    /// @pattern 40 53 48 83 EC 20 80 B9 D6 03 00 00 00 48 8B DA 74 09 48 8B 81 B0 01 00 00 EB 07 48 8B 81 B8 01
    void *__fastcall GetAudioResourceMetadata(void *a2);

    // 1.52 RVA: 0x1C3D700 / 29611776
    /// @pattern 40 56 48 83 EC 50 48 8B F1 48 8B 89 38 01 00 00 E8 8B 1C 01 00 84 C0 0F 84 B5 01 00 00 4C 8B 86
    // void __fastcall UpdateAudio();

    // 1.52 RVA: 0x1C3C0A0 / 29606048
    // 1.6  RVA: 0x1C68B10 / 29788944
    /// @pattern 48 8B C4 55 41 56 41 57 48 8D 6C 24 80 48 81 EC 80 01 00 00 0F 28 C2 0F 29 78 A8 F3 0F 58 81 C0
    void __fastcall Update(__int64 a2, float a3, uint64_t *a4);

    // 1.52 RVA: 0x1C3BD10 / 29605136a
    /// @pattern 48 89 5C 24 10 48 89 6C 24 18 48 89 7C 24 20 41 54 41 56 41 57 48 83 EC 60 48 8B 81 B0 01 00 00
    __int64 __fastcall UpdateWheelEmitters(__int64 a2);

    // 1.52 RVA: 0x1C36B10 / 29584144
    /// @pattern 48 83 EC 38 0F B6 91 CF 03 00 00 85 D2 74 17 83 EA 01 0F 84 07 01 00 00 83 EA 01 74 5C 83 FA 01
    bool __fastcall ShouldUseSomeAVListener();

    // 1.52 RVA: 0x1C38700 / 29591296
    /// @pattern 40 53 56 57 48 83 EC 40 80 B9 00 04 00 00 03 49 8B F8 48 8B D9 0F 85 E0 00 00 00 48 8B 89 38 01
    void __fastcall ToggleHorn(bool a2, uint8_t *a3);

    // 1.52 RVA: 0x1C3A8D0 / 29599952
    /// @pattern 48 83 EC 38 0F 57 C0 45 84 C0 74 19 8B C2 0F 57 D2 89 91 84 01 00 00 C6 81 88 01 00 00 01 F3 48
    __int64 __fastcall SetRadioTier(int a2, bool a3);

    // 1.52 RVA: 0x1C3A790 / 29599632
    /// @pattern 48 89 5C 24 10 48 89 6C 24 18 48 89 74 24 20 57 48 83 EC 20 48 83 B9 78 01 00 00 00 41 0F B6 E8
    void __fastcall NextRadioReceiverStation(uint32_t direction, bool);

    // 1.52 RVA: 0x1C37E80 / 29589120
    /// @pattern 40 53 48 83 EC 20 48 83 B9 78 01 00 00 00 48 8B D9 0F 84 B9 00 00 00 48 8B 81 50 01 00 00 80 B8
    bool __fastcall IsRadioReceiverActive();

    // 1.52 RVA: 0x1C35A20 / 29579808
    /// @pattern 48 89 5C 24 10 57 48 83 EC 20 48 8B B9 A0 03 00 00 48 8B D9 48 85 FF 74 15 48 8B CF E8 6F 14 B0
    // ~Acoustics();

    // 1.6 RVA: 0x1C6A170 / 29794672
    /// @pattern 40 56 48 83 EC 50 48 8B F1 48 8B 89 38 01 00 00 E8 7B 1E 01 00 84 C0 0F 84 B5 01 00 00 4C 8B 86
    void __fastcall UpdateTPPinAudioSystem();
    
    // Called from Update
    // 1.6 RVA: 0x1C6A810 / 29796368
    /// @pattern 48 8B C4 48 89 50 10 55 56 57 41 56 48 8D 68 C8 48 81 EC 18 01 00 00 80 B9 00 04 00 00 03 41 0F
    void __fastcall UpdateEvents(WheelUpdate *update, __int64 a3);

    // 1.6 RVA: 0x1C62AE0 / 29764320
    /// @pattern 48 89 5C 24 10 48 89 6C 24 18 56 57 41 56 48 83 EC 70 48 8B 69 08 49 8B D8 4C 8B 01 48 8B F2 0F
    static void __fastcall UpdateTireParameters(TireParameterUpdate * tpu, TireUpdate *tireUpdate);

    uint64_t unk00;
    uint64_t entityID;
    float unk10;
    float unk14;
    float unk18;
    float unk1C;
    uint64_t unk20[29];
    float unk108;
    float unk10C;
    float unk110;
    float unk114;
    float unk118;
    float unk11C;
    float unk120;
    float unk124;
    uint32_t unk128;
    uint32_t unk12C;
    uint32_t unk130;
    uint32_t unk134;
    BaseObject *vehicle;
    CName player_audio_resource_hash;
    CName traffic_audio_resource_hash;
    Acoustics *self;
    float unk158;
    uint32_t unk15C;
    uint8_t unk160;
    uint8_t unk161;
    uint8_t unk162;
    uint8_t unk163;
    uint8_t unk164;
    uint8_t unk165;
    uint8_t unk166;
    uint8_t unk167;
    // radio_car_sports_npc, etc
    CName radioStation;
    uint64_t unk170;
    EntityEmitters *unk178;
    uint8_t unk180;
    uint8_t unk181;
    uint8_t unk182;
    uint8_t unk183;
    uint8_t unk184;
    uint8_t unk185;
    uint8_t unk186;
    uint8_t unk187;
    uint64_t unk188[2];
    EntityEmitters *unk198;
    uint64_t unk1A0[2];
    audio::VehicleMetadata *player_audio_resource_metadata;
    audio::VehicleMetadata *traffic_audio_resource_metadata;
    uint64_t unk1C0[24];
    uint64_t unk280[1];
    uint32_t unk288[42];
    // num materials/wheels?
    uint32_t unk330;
    uint32_t unk334;
    CName tirePhysicalMaterial[4];
    uint64_t unk358[6];
    uint32_t unk388;
    uint32_t unk38C;
    Vector3 unk390;
    float unk39C;
    EntityEmitter scrapingEmitter;
    float scrapingTimer;
    float unk3B4;
    CName scrapingLoopStart;
    CName scrapingLoopEnd;
    uint8_t unk3C8;
    uint8_t isTPP2;
    uint8_t unk3CA;
    uint8_t unk3CB[4];
    Type type;
    uint8_t unk3D0;
    uint8_t unk3D1;
    uint8_t unk3D2;
    uint8_t unk3D3;
    uint8_t unk3D4;
    uint8_t unk3D5;
    uint8_t usePlayer;
    uint8_t unk3D7;
    uint64_t unk3D8[5];
    uint8_t unk400;
    uint8_t isTPP;
    uint8_t unk402;
    uint8_t unk403;
    float unk404;
    uint8_t unk408;
    uint8_t unk409;
    uint8_t unk40A;
    uint8_t unk40B;
    uint8_t wheelEventsStarted;
    uint8_t unk40D;
    uint8_t unk40E;
    uint8_t unk40F;
    uint64_t unk410;
    uint64_t unk418;
    float unk420;
    float unk424;
    float unk428;
    float unk42C;
    uint64_t unk430;
    uint64_t unk438;
    float unk440;
    float unk444;
    float unk448;
    float unk44C;
    float unk450;
    float unk454;
    float suspensionSqueekTimeout;
    float unk45C;
    float unk460;
};

// RED4EXT_ASSERT_SIZE(Acoustics, 0x590);
RED4EXT_ASSERT_OFFSET(Acoustics, unk460, 0x460);

}