#pragma once

// This file is generated by Jack

#include <cstdint>
#include <RED4ext/Common.hpp>
#include <RED4ext/Scripting/Natives/Generated/Transform.hpp>
#include <RED4ext/Scripting/Natives/Generated/WorldTransform.hpp>
#include <RED4ext/Scripting/Natives/Generated/Vector3.hpp>
#include <RED4ext/Scripting/Natives/Generated/Matrix.hpp>
#include <RED4ext/Scripting/Natives/Generated/physics/VehiclePhysicsInsert1.hpp>
#include <RED4ext/Scripting/Natives/Generated/physics/VehiclePhysicsInsert2.hpp>

namespace RED4ext
{

namespace vehicle
{
struct BaseObject;
}

namespace physics {
#pragma pack(push, 1)
struct VehiclePhysics
{
    static constexpr const char* NAME = "physicsVehiclePhysics";
    static constexpr const char* ALIAS = NAME;

    // Base
    uintptr_t __vftable;
    uint64_t unk08;
    RED4ext::Vector3 velocity;
    uint32_t unk10;
    uint8_t unk20;
    uint8_t unk21[7];
    uint64_t unk28;
    RED4ext::WorldTransform worldTransform;
    uint8_t unk50;
    uint8_t unk51[7];
    uint64_t unk58;
    RED4ext::vehicle::BaseObject* parent;
    uintptr_t waterParams;
    uint8_t unk70;
    uint8_t unk71[7];
    uint64_t unk78;
    RED4ext::WorldTransform worldTransform2;
    float unkA0;
    float unkA4;
    float setTo0point5;
    int32_t unkAC;
    float unkB0;
    uint8_t unkB4;
    uint8_t unkB5;
    uint16_t unkB6;
    uint8_t unkB8;
    uint8_t unkB9;
    uint16_t unkBA;
    uint16_t unkBC;
    uint16_t unkBE;
    float has_been_flipped_over_for_some_time_delay;
    float unkC4;
    uintptr_t physicsBaseStruct2;

    // Wheeled
    uint32_t unkD0;
    RED4ext::Vector4 unkD4Position;
    float unkE4;
    uint32_t unkE8;
    uint32_t unkEC;
    float wheelTurningThing;
    uint8_t unkF4;
    uint8_t unkF5;
    uint8_t unkF6;
    uint8_t unkF7;
    RED4ext::vehicle::BaseObject* parent2;
    RED4ext::physics::VehiclePhysicsInsert1 wheel1;
    RED4ext::physics::VehiclePhysicsInsert1 wheel2;
    RED4ext::physics::VehiclePhysicsInsert1 wheel3;
    RED4ext::physics::VehiclePhysicsInsert1 wheel4;
    uint32_t wheelCount;
    uint32_t unk5C4[3];
    RED4ext::physics::VehiclePhysicsInsert2 insert1;
    RED4ext::physics::VehiclePhysicsInsert2 insert2;
    RED4ext::physics::VehiclePhysicsInsert2 insert3;
    RED4ext::physics::VehiclePhysicsInsert2 insert4;
    uint8_t insertCount;
    uint8_t unkB91;
    uint8_t unkB92;
    uint8_t unkB93;
    uint32_t unkB94[6];
    float antiSwaybarDampingScalor;
    float turningRollFactor;
    float turningRollFactorWeakContactMul;
    float turningRollFactorWeakContactThresholdMin;
    float turningRollFactorWeakContactThresholdMax;
    float maxWheelTurnDeg;
    float wheelTurnMaxAddPerSecond;
    float wheelTurnMaxSubPerSecond;
    uint8_t useAlternativeTurnUpdate;
    uint8_t unkBCD;
    uint8_t unkBCE;
    uint8_t unkBCF;
    float turnUpdateBaseSpeedThreshold;
    float turnUpdateMaxSpeedThreshold;
    float turnUpdateMaxSpeedTurnChangeMul;
    float turnUpdateMaxSpeedTurnMul;
    float turnUpdateInputDiffForSlowChange;
    float turnUpdateInputDiffForFastChange;
    float turnUpdateInputFastChangeSpeed;
    float turnUpdateInputSlowChangeSpeed;
    float turnUpdateInputDiffProgressionPow;
    float airResistanceFactor;
    float brakingFrictionFactor;
    float lowVelStoppingDeceleration;
    float handbrakeBrakingTorque;
    float forwardWeightTransferFactor;
    float sideWeightTransferFactor;
    float smoothWheelContactIncreseTime;
    float smoothWheelContactDecreseTime;
    uint32_t wheelsFrictionMap;
    uint32_t unkC18;
    float slipAngleCurveScale;
    float slipAngleMinSpeedThreshold;
    float slipRatioCurveScale;
    float slipRatioMinSpeedThreshold;
    float slopeTractionReductionBegin;
    float slopeTractionReductionMax;
    float slopeTractionReductionFactor;
    float unkC38;
    float unkC3C;
    RED4ext::Vector4 unkC40;
    RED4ext::Matrix unkC50;
    RED4ext::Matrix unkC90;
    uint32_t unkCD0[4];
    uint32_t wheelsNeedUpdate;
    uint32_t unkCE4;
    DynArray<uintptr_t> driveHelpers;
    RED4ext::Handle<void> curveSet;
    uint64_t stuckTimeout;
    float* transformStruct;
    uint64_t unkD18;
    RED4ext::vehicle::BaseObject* parent3;
    RED4ext::Vector4 unkD28;
    RED4ext::Vector4 unkD38;
    RED4ext::Vector4 unkD48;
    RED4ext::Vector4 unkD58;

    // Car
};
#pragma pack(pop)
//char (*__kaboom)[sizeof(VehiclePhysics)] = 1;
//char (*__kaboom2)[offsetof(VehiclePhysics, unkD4Position)] = 1;
RED4EXT_ASSERT_OFFSET(VehiclePhysics, driveHelpers, 0xCE8);
RED4EXT_ASSERT_SIZE(VehiclePhysics, 0xD68);
} // namespace physics
} // namespace RED4ext

