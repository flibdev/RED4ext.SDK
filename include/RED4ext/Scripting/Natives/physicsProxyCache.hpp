#pragma once

// This file is generated by Jack

#include <RED4ext/Common.hpp>
#include <cstdint>
#include <RED4ext/Scripting/Natives/Generated/Transform.hpp>
#include <RED4ext/Scripting/Natives/physicsInitialState.hpp>
#include <RED4ext/Scripting/Natives/physicsProxyManager.hpp>
#include <RED4ext/Scripting/Natives/physicsStateValue.hpp>
#include <RED4ext/Scripting/Natives/physicsProxyID.hpp>
#include <RED4ext/Scripting/Natives/physicsProxyCacheID.hpp>

namespace RED4ext::physics
{

struct BaseProxy;


// some sort of linked list
struct ProxyCacheEntry {
    ProxyID proxyID;
    // only referenced in Get when != 0
    uint16_t counter;
    // flags
    // 4 |='d to enable?
    uint8_t unk06;
    uint8_t wake;
    ProxyCacheEntry *previous;
    uint32_t unk10;
    uint32_t dataCacheIndex[4];
    uint8_t updateType[4];
    uint8_t bodyIndex[4];
    uint8_t shapeIndex[4];
};

struct ProxyCache {
    // 1.6  RVA: 0x46B1C0 / 4633024
    /// @pattern 48 85 D2 0F 84 43 01 00 00 53 55 56 41 55 48 83 EC 38 8B 81 84 00 00 00 41 8B F1 41 8B E8 48 8B
    void __fastcall AddToCache(ProxyCacheEntry *entry, int bodyIndex, int shapeIndex, 
        StateValue updateType, void *data, size_t Size, bool wake);

    // calls proxy->sub_50 if proxyCacheEntry doesn't exist
    // gets from Cache if it exists and matches query
    // 1.6  RVA: 0x46AFA0 / 4632480
    /// @pattern 48 89 5C 24 08 48 89 6C 24 18 48 89 74 24 20 57 48 83 EC 50 8B 02 41 8B F8 48 8B F2 89 44 24 68
    bool __fastcall GetFromCacheOrGet(ProxyID *proxyID, unsigned int bodyIndex, unsigned int shapeIndex, 
        StateValue updateType_1, void *data, uint32_t size);

    // 1.6  RVA: 0x4B8290 / 4948624
    /// @pattern 81 FA 00 00 10 00 73 0C 8B C2 48 05 60 00 30 00 48 03 C1 C3 33 C0 C3
    void *__fastcall GetDataFromCache(unsigned int dataCacheIndex);

    uint64_t unk00[8];
    uint32_t unk40;
    uint32_t unk44;
    uint64_t unk48[7];
    uint32_t unk80;
    uint32_t unk84;
    StaticArray<ProxyCacheEntry, 0xFFFF> unk88;
    uint32_t _unk30005C;
    uint8_t dataCache[0xFFFFF];
};

struct ProxyCacheManager
{
    struct Unk948 {
        // 1.6  RVA: 0x497F50 / 4816720
        /// @pattern 40 55 53 56 57 41 54 41 55 41 56 41 57 48 8D AC 24 F8 FE FF FF 48 81 EC 08 02 00 00 4C 8B F1 0F
        __int64 __fastcall Kick(float a2);

        // stored in unk2A2054 upon enable collision
        ProxyCacheID proxyCacheID;
        uint32_t unk04;
        uint64_t unk08[2];
        void * aggregate;
        uint64_t unk20[4];
        uint8_t unk40[6];
        // mutex for systemKeys
        SharedMutex unk46;
        DynArray<Handle<BaseProxy>> systemKeys;
        uint8_t state;
        uint64_t unk60[26];
        uint32_t unk130;
        Vector3 offset;
    };

    SharedMutex unk00;
    // All Fs initially
    Handle<void*> unk08;
    // All Fs initially
    Handle<void*> unk18;
    uint32_t unk28;
    uint32_t unk2C;
    uint64_t unk30;
    // compared to ProxyCacheID.unk38_match
    uint8_t unk38[256];
    uint32_t unk138;
    uint32_t unk13C;
    // index'd by ProxyManager.unk2A2054 / ProxyCacheID.index
    StaticArray<ProxyCache*, 0x100> proxyCaches;
    // index'd by ProxyCacheID.index
    StaticArray<Unk948*, 0x100> unk948;
};
RED4EXT_ASSERT_SIZE(ProxyCacheManager, 0x1150);
RED4EXT_ASSERT_OFFSET(ProxyCacheManager, unk948, 0x948);
//char (*__kaboom)[sizeof(ProxyCacheManager)] = 1;

} // namespace RED4ext::physics