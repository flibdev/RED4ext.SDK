#pragma once

// This file is generated by Jack

#include <cstdint>
#include <RED4ext/Common.hpp>
#include <RED4ext/NativeTypes.hpp>
#include <RED4ext/Scripting/Natives/actionActionBase.hpp>
#include <RED4ext/Scripting/Natives/actionActionInterface.hpp>
#include <RED4ext/Scripting/Natives/Generated/AI/CAgent.hpp>
#include <RED4ext/Scripting/Natives/Generated/audio/VehicleMetadata.hpp>
#include <RED4ext/Scripting/Natives/Generated/ent/EntityID.hpp>
#include <RED4ext/Scripting/Natives/Generated/game/data/Vehicle_Record.hpp>
#include <RED4ext/Scripting/Natives/Generated/game/IBlackboard.hpp>
#include <RED4ext/Scripting/Natives/Generated/game/interactions/Component.hpp>
#include <RED4ext/Scripting/Natives/Generated/game/Object.hpp>
#include <RED4ext/Scripting/Natives/Generated/game/OccupantSlotComponent.hpp>
#include <RED4ext/Scripting/Natives/Generated/game/Puppet.hpp>
#include <RED4ext/Scripting/Natives/Generated/move/Component.hpp>
#include <RED4ext/Scripting/Natives/Generated/Matrix.hpp>
#include <RED4ext/Scripting/Natives/Generated/vehicle/AutonomousData.hpp>
#include <RED4ext/Scripting/Natives/Generated/vehicle/CameraManager.hpp>
#include <RED4ext/Scripting/Natives/Generated/vehicle/ChassisComponent.hpp>
#include <RED4ext/Scripting/Natives/Generated/vehicle/Controller.hpp>
#include <RED4ext/Scripting/Natives/Generated/vehicle/PersistentDataPS.hpp>
#include <RED4ext/Scripting/Natives/Generated/world/EffectBlackboard.hpp>
#include <RED4ext/Scripting/Natives/Generated/world/RuntimeSystemPhysics.hpp>
#include <RED4ext/Scripting/Natives/Generated/WorldTransform.hpp>
#include <RED4ext/Scripting/Natives/vehicleAirControl.hpp>
// #include <RED4ext/Scripting/Natives/vehiclePhysics.hpp>
// #include <RED4ext/Scripting/Natives/vehiclePhysicsData.hpp>
#include <RED4ext/Scripting/Natives/Generated/red/ResourceReferenceScriptToken.hpp>
#include <RED4ext/Scripting/Natives/gamedataTweakValue.hpp>

namespace RED4ext
{
struct WorldWidgetComponent;
namespace weapon { struct Object; }
namespace AI { struct Archetype; struct VehicleAgent; }
namespace game { struct VehicleSystem; struct IPhotoModeSystem; }
namespace world { struct RuntimeSystemPhysics; struct RuntimeSystemEffects; }
namespace ent { struct Entity; }
namespace audio { struct GameParameterStorage; struct BankManager; struct Metadata; struct Emitters; struct EmitterPositions; struct EmitterPosition; }
namespace vehicle
{
struct Physics;
struct PhysicsData;
struct AirControl;
struct Weapon;
struct BaseObject;
struct Destruction;
struct Acoustics;
struct Collisions;
struct Effects;
struct Autopilot;

//struct Interface : game::Object::Interface
//{
//    virtual uint64_t Destruct(bool a1) override; // 00
//
//    // Returns 0
//    virtual uint64_t sub_08() override;
//};

enum class Type : __int8
{
  Car = 0x0,
  Bike = 0x1,
  AV = 0x2,
  Tank = 0x3,
  Yacht = 0x4,
  Unknown = 0x5,
};

struct Unk588 {

    // 1.52 RVA: 0x1C3FB20 / 29621024
    /// @pattern 48 89 5C 24 08 48 89 74 24 10 57 48 83 EC 30 48 89 11 48 8B C2 C7 81 50 03 00 00 00 00 00 00 48
    __int64 Unknown(BaseObject *vehicle, __int64 a3);

    // 1.6 RVA: 0x1C6D380 / 29807488
    /// @pattern 48 83 C1 10 E9 B7 1B 00 00
    void UpdateTransform(RED4ext::Transform *a2);

    RED4ext::vehicle::BaseObject *vehicle;
    uint8_t affectsTPPAudio;
    uint32_t unk0C;
    uint32_t unk10;
    uint32_t unk14;
    RED4ext::Handle<void*> unk18;
    uint64_t unk28;
    void * unk30;
    void * unk38;
    struct Unk40 {
        uint32_t unk00[3];
        uint32_t unk0C;
        float unk10;
        uint32_t unk14;
        uint32_t unk18;
        uint32_t unk1C;
        float unk20;
        float unk24;
    } * unk40;
    uint32_t unk48;
    uint32_t unk4C;
    uint64_t unk50;
    float unk58;
    float unk5C;
    float unk60;
    float unk64;
    uint8_t unk68;
    uint8_t unk69;
    uint8_t unk6A;
    uint8_t unk6B;
    uint8_t unk6C;
    uint8_t unk6D;
    uint8_t unk6E;
    uint8_t unk6F;
    uint8_t unk70;
    uint8_t unk71;
    uint8_t unk72;
    uint8_t unk73;
    uint8_t unk74;
    uint8_t unk75;
    uint8_t unk76;
    uint8_t unk77;
    uint64_t unk78;
    RED4ext::Matrix unk80;
    float unkC0;
    float unkC4;
    float unkC8;
    float unkCC;
    uint64_t unkD0[8];
    float unk110;
    float unk114;
    uint64_t uk118[7];
    uint32_t unk150;
    uint32_t unk154;
    float unk158;
    uint32_t unk15C;
    void * unk160;
    float unk168;
    float unk16C;
    float unk170;
    float unk174;
    uint64_t unk178;
    float unk180;
    float unk184;
    float unk188;
    float unk18C;
    float unk190;
    float unk194;
    uint32_t unk198;
    float unk19C;
    uint64_t unk1A0;
    uint64_t unk1A8[5];
    RED4ext::Vector4 unk1D0;
    RED4ext::Vector4 unk1E0;
    RED4ext::Transform unk1F0;
    uint32_t unk210;
    uint32_t unk214;
    RED4ext::Transform unk218;
    uint64_t unk238;
    uint64_t unk240;
    uint64_t unk248[5];
    RED4ext::Transform unk270;
    uint64_t unk290;
    uint64_t unk298;
    uint64_t unk2A0;
    uint64_t unk2A8;
    float unk2B0;
    uint32_t unk2B4;
    uint8_t unk2B8;
    uint8_t unk2B9;
    uint8_t unk2BA;
    uint8_t unk2BB;
    uint8_t unk2BC;
    uint8_t unk2BD;
    uint8_t unk2BE;
    uint8_t unk2BF;
    uint16_t unk2C0;
    uint8_t unk2C2;
    uint8_t tweak2C3[3];
    uint8_t tweak2C6[3];
    uint8_t tweak2C9[3];
    uint8_t tweak2CC[3];
    uint8_t tweak2CF[3];
    float unk2D4;
    float unk2D8;
    uint8_t unk2DC;
    uint8_t unk2DD;
    uint8_t unk2DE;
    uint8_t unk2DF;
    uint64_t unk2E0[2];
    RED4ext::Transform unk2F0;
    uint64_t unk310[9];
    void * unk358;
    void * unk360;
    void * companionRelated;
    void * unk370;
    uint32_t unk378;
    uint32_t unk37C;
    RED4ext::SharedMutex unk380;
};

// RED4EXT_ASSERT_SIZE(Unk588, 0x388);

struct Movement
{
  Handle<AI::VehicleAgent> aiVehicleAgent;
  Handle<move::Component> moveComponent;
  vehicle::BaseObject *vehicle;
};

RED4EXT_ASSERT_SIZE(Movement, 0x28);

struct Unk610
{
  Handle<ISerializable> unk00;
  Handle<ISerializable> unk10;
};

RED4EXT_ASSERT_SIZE(Unk610, 0x20);

enum PhysicsState
{
  Traffic = 0x1,
  Unk2 = 0x2,
  Unk4 = 0x4,
  Unk8 = 0x8,
  Asleep = 0x10,
  Unk20 = 0x20,
  Parked = 0x40,
  PlayerControlledMaybe = 0x80,
  Chase = 0x100,
};

// #pragma pack(push, 1)
struct BaseObject : game::Object
{
    static constexpr const char* NAME = "vehicleBaseObject";
    static constexpr const char* ALIAS = "VehicleObject";
    static constexpr const uintptr_t VFT = vehicleBaseObject_VFT_Addr;

// overridden virtuals

    /// @pattern /mov(vehicleBaseObject_Class_p) /retn
    virtual CClass* GetNativeType() override;
    virtual void sub_148(uintptr_t a1, uintptr_t a2) override;          // sets vehicleSystem, gotModeSystem, photoModeSystem, chassis, vehicleRecord
    virtual void Attach(void *) override;                               // calls 268, 270, 350
    virtual uintptr_t Detach() override;
    virtual void sub_168(uint8_t) override;                             // isTPP interaction
    virtual void OnRequestComponents(void *) override;
    virtual CString* sub_1C0(CString*) override;
    virtual CName* GetAudioResourceName(CName*) override;               // Looks at Acoustics, sub_1D0
    virtual uint64_t OnTakeControl(game::ComponentHelper*) override;    // Something with unk388 & vehicle controller, sub_1F8
    virtual uint64_t sub_218(WorldTransform*) override;                 // Send & process vehicleTeleportEvent

// new virtuals

    virtual void sub_268();                                         // 268 loads fx tweaks, makes vehicle_record 0x600 big?, loads airControl
    virtual void sub_270();                                         // 270 loads vehicle weapons
    virtual float sub_278();                                        // 278 sets 694 to 0 
    virtual int32_t sub_280(WorldTransform*);                       // 280 applies worldTransform to placeholder, physics, physicsData, this->worldTransform
    virtual uint64_t sub_288() { };                                 // 288
    virtual uint64_t sub_290();                                     // 290 may call 288, actionInterface stuff, driveToPointComplete
    virtual void sub_298(Transform*);                               // 298 calls physics->sub_88
    virtual float sub_2A0();                                        // 2A0 returns 45.0
    virtual uint64_t sub_2A8() { };                                 // 2A8
    virtual void sub_2B0(uint64_t, uint64_t);                       // 2B0
    virtual void sub_2B8() { };                                     // 2B8
    virtual void sub_2C0(void *, void *);                           // 2C0 calls physics->sub_58, vehicleQuickHacks.maxRange
    virtual void sub_2C8() { };                                     // 2C8
    virtual void sub_2D0() { };                                     // 2D0
    virtual void * sub_2D8();                                       // 2D8 onGround/isInAir interaction
    virtual void sub_2E0() { };                                     // 2E0
    virtual void sub_2E8() { };                                     // 2E8
    virtual void sub_2F0();                                         // 2F0
    virtual void * sub_2F8();                                       // 2F8 vehicleController
    virtual uint32_t sub_300();                                     // 300 returns 1u32
    virtual uint64_t sub_308(bool);                                 // 308 sets PhysicsState::Unk8, processes transforms
    virtual Handle<ISerializable> GetRecordHandle(Handle<ISerializable>*);  // 310 gets Handle at 638 (vehicleRecord)
    virtual ISerializable* GetRecord();                             // 318 gets pointer at 638
    virtual float sub_320();                                        // 320 something with vehicle record & A11
    virtual void sub_328(bool);                                     // 328 EngineTurnOn/Off events, OnDriverMounted start/stop exhaust effect
    virtual uint8_t sub_330();                                      // 330 return 0u8
    virtual uint8_t sub_338();                                      // 338 return 0u8
    virtual uint64_t sub_340(DynArray<void*> *);                    // 340 dynArray at A00
    virtual uint64_t sub_348();                                     // 348
    virtual void sub_350();                                         // 350 update blackboard to 1
    virtual void sub_358(Handle<ISerializable>*);                   // 358 update blackboard to -1, same handle a 5B0
    virtual void sub_360();                                         // 360 same as 350
    virtual void sub_368();                                         // 368 same as 358
    virtual void sub_370();                                         // 370 returns 1u32
    virtual void sub_378();                                         // 378 something with physicsData->bounds
    virtual void sub_380() { };                                     // 380
    virtual void LoadWeapons(DynArray<void*>);                      // 388 
    virtual void sub_390(uint32_t weaponIndex) { };                 // 390
    virtual void sub_398() { };                                     // 398
    virtual void sub_3A0();                                         // 3A0 rendering system, blackboard
    virtual void sub_3A8() { };                                     // 3A8
    virtual void sub_3B0(uint32_t weaponIndex);                     // 3B0 calls sub_3C0
    virtual void * sub_3B8(weapon::Object *weaponObject,            // 3B8 calls generic shoot
        Vector4 *weaponPosition, Vector4 *offset, 
        Vector4 *tracePosition, float range, __int64 numProjectiles, 
        __int64 a8, __int64 a9, __int64 a10);                                         
    virtual void sub_3C0() { };                                     // 3C0
    virtual Vector3* GetCrosshair(Vector3*);                        // 3C8 gets vector3 at B04
    virtual uint8_t GetWeaponIndex(int);                            // 3D0 get shoot value for index

// methods

    // 1.52 RVA: 0x1C60690 / 29755024
    // 1.6  RVA: 0x1C8D240 / 29938240
    // 1.61 RVA: 0x1C8D4C0
    // 1.61hf1 RVA: 0x1C8DBB0
    /// @pattern 48 89 5C 24 08 48 89 6C 24 10 48 89 74 24 20 57 48 83 EC 30 8B B1 50 02 00 00 41 0F B6 E8 8B FA
    void SetPhysicsState(RED4ext::vehicle::PhysicsState a2, bool a3);

    // 1.52 RVA: 0x1C4C4F0 / 29672688
    // 1.6  RVA: 0x1C78F70 / 29855600
    // 1.61 RVA: 0x1C791E0
    // 1.61hf1 RVA: 0x1C798D0
    /// @pattern 48 89 5C 24 08 48 89 74 24 10 57 48 83 EC 20 48 8B F9 48 8B 89 B0 02 00 00 48 85 C9 74 05 E8
    // 2.1
    /// @pattern 48 89 5C 24 08 57 48 83 EC 20 48 8B 81 C8 02 00 00 33 DB 48 8B F9 48 85 C0 74 0A C7 80 A0 00 00
    void UnsetPhysicsStates();

    // 1.52 RVA: 0x1C4D3A0 / 29676448
    /// @pattern 48 8B 81 B8 02 00 00 F3 0F 10 80 BC 01 00 00 C3
    float GetTotalMass();

    // 1.52 RVA: 0x1C4D3B0 / 29676464
    /// @pattern 48 8B 81 B8 02 00 00 F3 0F 10 40 40 C3
    float GetInverseMass();

    // 1.52 RVA: 0x1C4D3C0 / 29676480
    /// @pattern 48 8B 81 08 05 00 00 48 8B 89 B8 02 00 00 F3 0F 10 40 68 F3 0F 59 81 BC 01 00 00 C3
    float GetGravitationalForce();

    // 1.52 RVA: 0x1C4D3E0 / 29676512
    /// @pattern 8B 81 0C 06 00 00 C3
    float GetUnk60C();

    // 1.52 RVA: 0x1C4D3F0 / 29676528
    /// @pattern 48 89 5C 24 10 48 89 7C 24 20 55 48 8D 6C 24 A9 48 81 EC 90 00 00 00 83 B9 D0 05 00 00 00 48 8B
    CString  GetDisplayName(CString *);

    // 1.52 RVA: 0x1C4D630 / 29677104
    /// @pattern 48 89 5C 24 10 48 89 6C 24 18 48 89 74 24 20 57 48 83 EC 30 48 8B 99 C0 02 00 00 48 8B FA 48 8B
    Handle<void>  GetCurveSetData(Handle<void> *);

    // 1.52 RVA: 0x1C4D7B0 / 29677488
    /// @pattern 48 8B 81 08 05 00 00 C3
    world::RuntimeSystemPhysics  GetVehicleSystem();

    // 1.52 RVA: 0x1C4D7E0 / 29677536
    /// @pattern 40 53 48 83 EC 20 48 8B DA 44 3B 81 4C 09 00 00 73 2A 41 8B C0 4C 8D 04 40 48 8B 81 40 09 00 00
    Quaternion  GetWeaponOrientation(Quaternion *, uint32_t index);

    // 1.52 RVA: 0x1C4E190 / 29680016
    /// @pattern 40 55 56 57 48 8D 6C 24 B9 48 81 EC F0 00 00 00 48 8D B1 28 09 00 00 0F 29 B4 24 D0 00 00 00 48
    void HornForDuration();

    // 1.52 RVA: 0x1C4E3F0 / 29680624
    /// @pattern 48 8B C4 55 56 57 48 8D 68 A1 48 81 EC F0 00 00 00 0F 29 70 D8 48 8D B1 20 09 00 00 48 8B F9 0F
    void HornForDurationDelayed(float xmm1_4_0);

    // 1.52 RVA: 0x1C49080 / 29659264
    /// @pattern 48 83 EC 48 48 89 5C 24 50 48 8B D9 48 89 74 24 60 48 8D 4A 20 4C 89 74 24 38 48 8B F2 E8 8E 52
    // void ClearFinishMountingDelay(void *);

    // 1.52 RVA: 0x1C491C0 / 29659584
    /// @pattern C7 81 B4 08 00 00 00 00 80 3F C7 81 B8 08 00 00 00 00 80 3F C7 81 BC 08 00 00 00 00 80 3F C7 81
    void Reset8B4();

    // 1.52 RVA: 0x1C492A0 / 29659808
    /// @pattern 48 8D 81 E0 08 00 00 C3
    void  GetUnk8E0();

    // 1.52 RVA: 0x126CE00 / 19320320
    /// @pattern 48 8D 81 88 03 00 00 C3
    // action::ActionInterface  GetInterface();

    // 1.52 RVA: 0x72FE70 / 7536240
    /// @pattern 48 8B 81 B8 02 00 00 C3
    PhysicsData  GetPhysicsData();

    // 1.52 RVA: 0x72FE80 / 7536256
    /// @pattern F2 0F 10 81 58 02 00 00 C3
    double GetDeceleration();

    // 1.52 RVA: 0x1C5F7B0 / 29751216
    /// @pattern 48 8B C4 55 41 56 48 8D 68 98 48 81 EC 58 01 00 00 83 B9 4C 09 00 00 00 4C 8B F1 0F 84 00 04 00
    // void ProcessWeapons();

    // 1.52 RVA: 0x1C5F740 / 29751104
    /// @pattern 8B 91 50 02 00 00 F7 C2 EE FF FF FF 74 03 B0 01 C3 8B C2 C1 E8 04 A8 01 75 19 F6 C2 01 74 14 BA
    bool CheckPhysicsStateActionInterface();

    // 1.52 RVA: 0x1C55E70 / 29711984
    /// @pattern 40 53 48 83 EC 30 48 8B D9 0F 29 74 24 20 48 8B 89 B0 02 00 00 0F 28 F1 48 85 C9 74 18 48 8B 01
    void UpdatePhysicsSleepState(float deltaTime);

    // both process actions @ 0

    // 1.52 RVA: 0x1C55CF0 / 29711600
    // runs if physicsState != 0.0, runs physics->sub_30
    /// @pattern 48 89 5C 24 10 57 48 83 EC 40 33 C0 0F 29 74 24 30 48 89 81 54 02 00 00 49 8B F8 48 89 81 5C 02
    void PreUpdatePreMovePhysicsStateNotZero( __int64 a2, float *deltaTime, __int64 a4);

    // 1.52 RVA: 0x1C559F0 / 29710832
    /// @pattern 48 89 74 24 18 57 48 83 EC 70 44 0F 29 4C 24 40 49 8B F0 44 0F 28 C9 48 8B F9 E8 01 FC FF FF 48
    __int64 PreUpdatePreMovePhysicsStateZero(__int64 a2, __int64 a3, __int64 a4);

    // both process actions @ 1

    // 1.52 RVA: 0x1C54F90 / 29708176
    /// @pattern 48 89 5C 24 08 57 48 83 EC 50 0F 29 74 24 40 49 8B F8 0F 28 F1 48 8B D9 E8 03 FA FF FF 48 8B 03
    RED4ext::WorldTransform  PostMovePhysicsStateNotZero(float deltaTime, float *a3);

    // 1.52 RVA: 0x1C54DA0 / 29707680
    // runs physics->sub_38, checks isOnGround, does something with airTime
    /// @pattern 40 57 48 83 EC 60 0F 29 74 24 50 48 8B F9 48 89 5C 24 78 0F 28 F1 49 8B D8 E8 F2 FB FF FF 48 8B
    RED4ext::WorldTransform  PostMovePhysicsStateZero(float deltaTime, float *a3);

    // 1.52 RVA: 0x1C5D800 / 29743104
    // 1.6  RVA: 0x1C8A390 / 29926288
    // 1.61hf1 RVA: 0x1C8AD00 (not used)
    /// @pattern 48 89 5C 24 10 48 89 74 24 18 57 48 83 EC 30 48 8D B1 88 03 00 00 48 8B FA 48 8B CE 48 8D 54 24
    action::ActionBase * CreateAction(action::ActionBase **action_p, action::Type type);

    // 1.6  RVA: 0x164D380 / 23384960
    /// @pattern 48 89 5C 24 10 48 89 6C 24 18 48 89 74 24 20 57 41 54 41 55 41 56 41 57 48 83 EC 40 4C 8B F9 49
//    static Handle<RED4ext::ent::AnimatedComponent>  GetAnimatedComponentWithName(Handle<RED4ext::ent::AnimatedComponent> *handle, RED4ext::vehicle::BaseObject *vehicle, RED4ext::CName name);

    RED4ext::world::RuntimeSystemPhysics *physicsSystem;
    float unk248[5];
    bool isOnGround;
    RED4ext::vehicle::PhysicsState physicsState;
    uint32_t unk264;
    float acceleration;
    float deceleration;
    float handbrake;
    float strafeY;
    float strafeX;
    float turnInput;
    float leanFB;
    float rockFB;
    uint32_t unk288[3];
    uint8_t shootPrimary;
    uint8_t shootSecondary;
    uint8_t shootTertiary;
    uint8_t vehicleCameraInverse;
    float cameraX;
    float cameraY;
    float cameraMouseX;
    float cameraMouseY;
    uint8_t cycleLights;
    uint8_t horn;
    uint8_t unk2AA;
    uint8_t unk2AB;
    float unk2AC;
    float unk2B0;
    float unk2B4;
    float unk2B8;
    float unk2BC;
    float unk2C0;
    Physics *physics;
    PhysicsData *physicsData;
    Handle<ISerializable> curveSetData;
    Handle<ChassisComponent> chassis;
    float unk2F8[16];
    uint64_t chassisType;
    WorldTransform worldTransform;
    Vector3 unk360;
    float unk36C;
    Vector4 angularVelocity_related;
    Vector4 worldPosition_related;
    uint64_t unk390;
    Movement *movement;
    uint64_t aiVehicleAgent_related;
    uint64_t unk3A8;
    uint64_t unk3B0;
    action::ActionInterface actionInterface;
    Handle<ISerializable> driving;
    Handle<ISerializable> drivingParamsGeneric;
    Handle<ISerializable> drivingParamsRace;
    Handle<ISerializable> drivingParamsPanic;
    Handle<game::interactions::Component> driverInteraction;
    Handle<game::interactions::Component> passengerInteractions;
    Handle<Controller> vehicleController;
    Handle<ISerializable> PersistentDataPS;
    Handle<CameraManager> cameraManager;
    Handle<game::IPhotoModeSystem> photoModeSystem;
    game::VehicleSystem *vehicleSystem;
    void *godModeSystem;
    Handle<ISerializable> vehicleCNameThing;
    Handle<ISerializable> blackboard;
    Handle<ISerializable> unk578;
    uint64_t unk588;
    uint64_t unk590;
    uint32_t unk598;
    float unk59C;
    Handle<ISerializable> unk5A0;
    Handle<ISerializable> unk5B0;
    void *unk5C0;
    void *unk5C8;
    Collisions *collisions;
    Effects *effects;
    AirControl *airControl;
    Acoustics *acoustics;
    Handle<Autopilot> autopilot;
    Handle<Destruction> destruction;
    vehicle::Unk610 *unk610;
    float unk618;
    uint8_t permanantStun2;
    uint8_t unk61D;
    uint16_t permanantStun1;
    float unk620;
    uint8_t unk624;
    uint8_t unk625;
    uint8_t unk626;
    uint8_t unk627;
    Handle<SlotComponent> occupantSlotComponent;
    TweakDBID vehicleRecord; //  638
    Handle<game::data::Vehicle_Record> vehicleRecordHandle; // 640
    uint32_t driverCombatType;
    float hitCooldown;
    uint32_t unk658[5];
    Vector2 unk66C;
    uint32_t unk674;
    uint8_t unk678;
    uint8_t unk679;
    uint8_t unk67A;
    uint8_t unk67B;
    uint8_t unk67C;
    uint8_t unk67D;
    uint8_t unk67E;
    uint8_t unk67F;
    uint64_t unk680;
    uint64_t unk688;
    float unk690;
    float unk694;
    uint8_t unk698_unknown_tag;
    uint8_t ignoreImpulses;
    uint8_t immortal;
    uint8_t invulnerable;
    uint8_t unk69C;
    uint8_t unk69D;
    uint8_t unk69E;
    uint8_t unk69F;
    uint8_t unk6A0;
    uint8_t unk6A1;
    uint8_t unk6A2;
    uint8_t unk6A3;
    uint8_t unk6A4;
    uint8_t unk6A5;
    uint8_t unk6A6;
    uint8_t unk6A7;
    uint32_t unk6A8[4];
    uint32_t unk6B8[4];
    float unk6C8[2];
    uint8_t unk6D0;
    uint8_t unk6D1;
    uint8_t unk6D2;
    uint8_t unk6D3;
    float unk6D4[1];
    DynArray<WorldWidgetComponent> worldWidgetComponents;
    float unk6E8[2];
    Transform unk6F0;
    uint64_t unk710[2];
    uint64_t unk720[24];
    game::data::TweakValue max_tolerance_radius;
    game::data::TweakValue acc_pid_p;
    game::data::TweakValue acc_pid_i;
    game::data::TweakValue acc_pid_d;
    uint64_t unk810[7];
    uint64_t unk848;
    Handle<ISerializable> unk850;
    AutonomousData autonomousData; // 860 (870)
    uint8_t destruction_related;
    uint8_t isPlayerControlled;
    uint8_t unkA12;
    uint8_t unkA13;
    uint8_t unkA14;
    uint8_t unkA15;
    uint8_t unkA16;
    uint8_t unkA17;
    uint32_t unkA18[4];
    uint64_t unkA28[5];
    uint8_t unkA50;
    uint8_t unkA51;
    uint8_t unkA52;
    uint8_t unkA53;
    uint8_t sub_148_called;
    uint8_t unkA55;
    uint8_t unkA56;
    uint8_t unkA57;
    DynArray<void*> unkA58;
    DynArray<void*> unkA68;
    uint64_t unkA78;
    Handle<ISerializable> unkA80;
    Handle<ISerializable> unkA90;
    uint32_t unkAA0[4];
    game::data::TweakValue meleeHonkDelay;
    game::data::TweakValue meleeHonkDuration;
    game::data::TweakValue collisionHonkDelay;
    game::data::TweakValue collisionHonkDuration;
    game::data::TweakValue collisionHonkUpperThreshold;
    uint32_t unkAEC;
    DynArray<Weapon> weapons;
    int32_t numWeapons;
    Vector3 weapon_trace;
    uint64_t unkB10;
    DynArray<void*> unkB18;
    uint64_t unkB28;
    DynArray<void*> unkB30;
    uint64_t unkB40[4];
    HashMap<uint32_t, void*> unkB60;

    /* pre-2.0
    world::RuntimeSystemPhysics* physicsSystem;
    // resets when isOnGround, counts up otherwise
    float airTimer;
    bool isOnGround;
    uint8_t unk24D[3];
    PhysicsState physicsState;
    float acceleration;
    float deceleration;
    float handbrake;
    float strafeY;
    float strafeX;
    float turnInput;
    float leanFB;
    float rockFB;
    uint8_t shootPrimary;
    uint8_t shootSecondary;
    uint8_t shootTertiary;
    uint8_t vehicleCameraInverse;
    float cameraX;
    float cameraY;
    float cameraMouseX;
    float cameraMouseY;
    uint8_t cycleLights;
    uint8_t horn;
    uint8_t unk28A;
    uint8_t unk28B;
    float unk28C;
    float unk290;
    float unk294;
    float unk298;
    float unk29C;
    float unk2A0;
    float unk2A4;
    float unk2A8;
    float unk2AC;
    Physics* physics;             // 2B0
    PhysicsData* physicsData; // 2B8
    Handle<void> curveSetData;
    Handle<ChassisComponent> chassis;
    float unk2E0[16];
    uint64_t chassisType;
    uint64_t unk328;
    WorldTransform worldTransform;
    Vector3 unk350;
    float unk35C;
    uint8_t unk360;
    uint8_t unk361;
    uint8_t unk362;
    uint8_t unk363;
    float unk364;
    Unk368 *unk368;
    CName unk370;
    Handle<move::Component> moveComponent;
    action::ActionInterface actionInterface; // 388
    Handle<void> baseDrivingParams[4];
    Handle<game::interactions::Component> interactionsComponent;
    Handle<game::interactions::Component> passengerInteractions;
    Handle<Controller> vehicleController;
    Handle<PersistentDataPS> PersistentDataPS;
    Handle<CameraManager> cameraManager;
    game::VehicleSystem* vehicleSystem;
    Handle<game::IBlackboard> blackboard;
    Handle<void> blackboard2;
    Handle<void> controllerMaybe;
    uint64_t unk540;
    Handle<game::Puppet> drivingPuppet;
    Handle<game::Puppet> mountedPuppet;
    Collisions* collisions; // 568
    Effects* Effects;       // 570
    AirControl* airControl; // 578
    Acoustics* acoustics;   // 580
    Unk588* unk588;         // 588
    void* unk590;
    void* destructionParams;
    void* unk5A0;
    void* unk5A8;
    float turnX;
    float turnXRelated2;
    float turnXRelated;
    float deltaTurnX;
    Handle<game::OccupantSlotComponent> occupantSlotComponent;
    uint64_t unkTweakRecord; // 1488 0x5D0
    Handle<game::data::Vehicle_Record> vehicleRecord;
    float unk5E8;
    float unk5EC;
    float unk5F0;
    float unk5F4;
    float unk5F8;
    uint8_t permanantStun2;
    // gravity related
    uint8_t unk5FD;
    uint16_t permanantStun1;
    float unk600;
    uint8_t unk604;
    uint8_t unk605;
    uint8_t unk606;
    uint8_t unk607;
    // timer that counts down to zero (min value)
    float unk608;
    // added to on collision
    int32_t unk60C;
    uint8_t important;
    uint8_t ignoreImpulses;
    uint8_t unk612;
    uint8_t unk613;
    uint8_t unk614;
    // was summoned maybe?
    uint8_t unk615;
    uint8_t highPriorityDriving;
    uint8_t unk617;
    DynArray<void*> uiComponents;
    float unk628;
    float unk62C;
    // updated & compared to each other - some bigger struct
    float unk630;
    float unk634;
    Vector4 unk638;
    Vector4 unk648;
    Vector4 unk658;
    Matrix unk668;
    float unk6A8[10];
    // comes from unk588 maybe
    RED4ext::Transform unk6D0;
    uint64_t unk6F0[2];
    float max_tolerance_radius;
    float acc_pid_p;
    float acc_pid_i;
    float acc_pid_d;
    uint64_t unk710[10];
    AutonomousData autonomousData;
    uint8_t hasDestructionParams;
    uint8_t unk8B1;
    uint8_t unk8B2;
    uint8_t unk8B3;
    float unk8B4[5];
    DynArray<void*> unk8C8;
    uint64_t unk8D8[2];
    Vector3 unk8E8;
    float unk8F4;
    DynArray<Handle<ent::Entity>> projectiles;
    uint8_t updatingProjectiles;
    uint8_t unk909;
    uint8_t unk90A;
    uint8_t unk90B;
    float unk90C;
    uint32_t unk910[8];
    uint8_t meleeHonkDelay[3];
    uint8_t meleeHonkDuration[3];
    uint8_t collisionHonkDelay[3];
    uint8_t collisionHonkDuration[3];
    uint8_t collisionHonkUpperThreshold[3];
    uint8_t unk93F;
    DynArray<Weapon> weapons;
    Vector3 tracePosition;
    uint8_t unk95C;
    uint8_t unk95D;
    uint8_t unk95E;
    uint8_t unk95F;
    uint64_t unk960;
    DynArray<void*> puppets;
    uint64_t unk978;
    */
};
// #pragma pack(pop)
RED4EXT_ASSERT_SIZE(BaseObject, 0xB90);
// RED4EXT_ASSERT_OFFSET(BaseObject, weapons, 0x940);
// char (*__kaboom)[sizeof(BaseObject)] = 1;
// char (*__kaboom2)[offsetof(BaseObject, physicsSystem)] = 1;
} // namespace vehicle
using VehicleObject = vehicle::BaseObject;
} // namespace RED4ext
