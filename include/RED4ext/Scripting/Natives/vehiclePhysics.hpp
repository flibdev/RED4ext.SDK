#pragma once

// This file is generated by Jack

#include <cstdint>
#include <RED4ext/Common.hpp>
#include <RED4ext/Scripting/Natives/Generated/Transform.hpp>
#include <RED4ext/Scripting/Natives/Generated/WorldTransform.hpp>
#include <RED4ext/Scripting/Natives/Generated/Vector3.hpp>
#include <RED4ext/Scripting/Natives/Generated/Matrix.hpp>
#include <RED4ext/Scripting/Natives/vehiclePhysicsInsert1.hpp>
#include <RED4ext/Scripting/Natives/vehiclePhysicsInsert2.hpp>
#include <RED4ext/Scripting/Natives/Generated/vehicle/BaseObject.hpp>
#include <RED4ext/Scripting/Natives/vehiclePID.hpp>
#include <RED4ext/Scripting/Natives/vehiclePhysicsData.hpp>

namespace RED4ext
{

namespace vehicle
{
struct BaseObject;

#pragma pack(push, 1)
struct Physics
{
    static constexpr const char* NAME = "vehiclePhysics";
    static constexpr const char* ALIAS = NAME;
    static constexpr const uintptr_t VFT_RVA = 0x34316C8;

    virtual uint64_t Destruct(char);
    virtual uint64_t Create(vehicle::BaseObject *);
    virtual uint64_t sub_10();
    virtual uint64_t sub_18();
    virtual uint64_t VehiclePhysicsUnkChassisComponent_0();
    virtual uint64_t j_VP_UpdateWorldTransform();
    virtual uint64_t sub_30();
    virtual void sub_38(float deltaTime);
    virtual void sub_40(float deltaTime);
    virtual uint64_t FixedUpdate_PreSolve(uint64_t, float);
    virtual uint64_t sub_50();
    virtual uint64_t sub_58(float deltaTime);
    // empty
    virtual void sub_60();
    virtual uint64_t sub_68(float);
    virtual uint64_t sub_70(int, char);
    virtual uint64_t UpdatePhysicsWT2();
    // empty
    virtual void sub_80();
    // empty
    virtual void sub_88();
    virtual void SetUnk70To1();
    // empty
    virtual void sub_98();
    // empty
    virtual uint64_t sub_A0(uint64_t);
    virtual uint64_t IntializeVectorQuaternion(uint64_t);
    virtual uint64_t sub_B0(int, float);
    virtual bool UpdatePhysicsStuff();
    virtual bool IsInAirFromVehicle();
    virtual bool SomethingOrientationIsInAir();
    // return 0
    virtual void sub_D0();
    virtual void sub_D8(char);
    virtual double Return1D();
    virtual float Return1F();
    // empty
    virtual void sub_F0();
    // empty
    virtual void sub_F8();
    // empty
    virtual void sub_100();
    // empty
    virtual void sub_108();
    // empty
    virtual void sub_110();
    // empty
    virtual void sub_118();
    // updates some animation stuff, sub_120
    virtual uint64_t UpdatePhysicsWT3();
    // update blackboard, effectdata
    virtual uint64_t sub_128();
    virtual void sub_130();
    virtual uint64_t sub_138();
    virtual void LoadSomeVehiclePhysicsStuff(void *);

    // 1.52 RVA: 0x1CEB5B0 / 30324144
    /// @pattern 80 79 50 00 75 03 32 C0 C3 F2 0F 10 41 30 F2 0F 11 02 8B 41 38 89 42 08 B0 01 0F 10 41 40 0F 11
    char __fastcall ReadWorldTransform(RED4ext::WorldTransform *a2);

    // 1.52 RVA: 0x1CEB370 / 30323568
    /// @pattern 48 89 5C 24 20 55 41 56 41 57 48 8D 6C 24 B9 48 81 EC B0 00 00 00 4C 8B F1 41 0F B6 D8 48 8B 49
    void __fastcall UpdateDataWorldTransform(WorldTransform * a2, bool updateChassis);

    // 1.52 RVA: 0x1CEB5E0 / 30324192
    /// @pattern 48 8B 49 60 E9 87 48 A4 FE
    PhysicsData *__fastcall GetPhysicsData();

    // 1.52 RVA: 0x1CEB920 / 30325024
    /// @pattern 48 8B 41 68 F3 0F 10 40 10 0F 2F 40 20 0F 96 C0 C3
    bool __fastcall GetSomethingWaterParams();

    // 1.52 RVA: 0x1CEB940 / 30325056
    /// @pattern 48 83 EC 28 48 8B 49 60 E8 23 45 A4 FE 48 8B C8 48 83 C4 28 E9 F7 5B FF FF
    bool __fastcall UsesAlternativeChassisMass();

    // 1.52 RVA: 0x1CEBAE0 / 30325472
    /// @pattern F6 C2 01 74 3B 53 48 83 EC 40 48 8B D9 48 8D 54 24 20 48 8B 49 60 E8 35 A7 34 FF F2 0F 10 00 F2
    void __fastcall UpdateWorldTransform2FromParent(char a2);

    // 1.52 RVA: 0x1CEC3F0 / 30327792
    /// @pattern 48 89 5C 24 10 48 89 6C 24 20 56 57 41 56 48 83 EC 20 48 8B 01 4C 8B F1 FF 90 40 01 00 00 48 8D
    double __fastcall LoadHasBeenFlippedOver();

    // 1.52 RVA: 0x1CEC520 / 30328096
    /// @pattern C7 81 A0 00 00 00 00 00 80 3F C3
    void __fastcall SetUnkA0ToOne();

    // 1.52 RVA: 0x1CEC530 / 30328112
    /// @pattern 48 89 5C 24 08 57 48 83 EC 20 48 8B F9 48 8B DA 48 8B 49 60 E8 27 39 A4 FE 48 8B C8 48 8B D3 E8
    void __fastcall ResetWithWorldTransform(WorldTransform *worldTransform);

    // 1.52 RVA: 0x1CEC5E0 / 30328288
    /// @pattern 48 83 EC 28 48 8B 49 60 84 D2 74 19 E8 7F 38 A4 FE F3 0F 10 0D DF 0F 3D 01 48 8B C8 48 83 C4 28
    __int64 __fastcall SetUsesAlternativeChassisMass(bool uses);

    // 1.52 RVA: 0x368A20 / 3574304
    /// @pattern 48 8B 41 60 C3
    BaseObject *__fastcall GetVehicle();

    uint64_t unk08;
    Vector3 velocity;
    uint32_t unk10;
    uint8_t unk20;
    uint8_t unk21[7];
    uint64_t unk28;
    WorldTransform worldTransform;
    uint8_t unk50;
    uint8_t unk51[7];
    uint64_t unk58;
    BaseObject* parent;
    uintptr_t waterParams;
    uint8_t unk70;
    uint8_t unk71[7];
    uint64_t unk78;
    WorldTransform worldTransform2;
    float unkA0;
    float unkA4;
    float setTo0point5;
    int32_t unkAC;
    float unkB0;
    uint8_t unkB4;
    uint8_t unkB5;
    uint16_t unkB6;
    uint8_t unkB8;
    uint8_t unkB9;
    uint16_t unkBA;
    uint16_t unkBC;
    uint16_t unkBE;
    float has_been_flipped_over_for_some_time_delay;
    float unkC4;
    uintptr_t physicsBaseStruct2;
};
//char (*__kaboom)[sizeof(VehiclePhysics)] = 1;
//char (*__kaboom2)[offsetof(VehiclePhysics, unkD4Position)] = 1;

struct WheeledPhysics : Physics {
    static constexpr const char* NAME = "vehicleWheeledPhysics";
    static constexpr const char* ALIAS = NAME;
    static constexpr const uintptr_t VFT_RVA = 0x3431EE0;

    // 1.52 RVA: 0x1D0DB70 / 30464880
    /// @pattern 40 56 41 56 48 83 EC 38 48 89 5C 24 58 4C 8B F1 48 89 7C 24 68 4C 89 7C 24 30 8B F2 E8 1F C9 FD
    WheeledPhysics* __fastcall InitializeWheeled(unsigned int wheels);

// overrides

    virtual uint64_t Destruct(char) override;
    virtual uint64_t Create(vehicle::BaseObject *) override;
    // virtual uint64_t sub_10() override;
    virtual uint64_t sub_18() override;
    virtual uint64_t VehiclePhysicsUnkChassisComponent_0() override;
    // virtual uint64_t j_VP_UpdateWorldTransform() override;
    // virtual uint64_t sub_30() override;
    virtual void sub_38(float deltaTime) override;
    // virtual void sub_40(float deltaTime) override;
    virtual uint64_t FixedUpdate_PreSolve(uint64_t, float) override;
    virtual uint64_t sub_50() override;
    virtual uint64_t sub_58(float deltaTime) override;
    virtual void sub_60() override;
    // virtual uint64_t sub_68(float) override;
    virtual uint64_t sub_70(int, char) override;
    // virtual uint64_t UpdatePhysicsWT2() override;
    // virtual void sub_80() override;
    // virtual void sub_88() override;
    // virtual void SetUnk70To1() override;
    // virtual void sub_98() override;
    // virtual uint64_t sub_A0(uint64_t) override;
    // virtual uint64_t IntializeVectorQuaternion(uint64_t) override;
    virtual uint64_t sub_B0(int, float) override;
    virtual bool UpdatePhysicsStuff() override;
    virtual bool IsInAirFromVehicle() override;
    // virtual bool SomethingOrientationIsInAir() override;
    virtual void sub_D0() override;
    virtual void sub_D8(char) override;
    // get e4
    virtual double Return1D() override;
    // get max wheel turn deg
    virtual float Return1F() override;
    // virtual void sub_F0() override;
    virtual void sub_F8() override;
    virtual void sub_100() override;
    virtual void sub_108() override;
    // virtual void sub_110() override;
    // virtual void sub_118() override;
    virtual uint64_t UpdatePhysicsWT3() override;
    // virtual uint64_t sub_128() override;
    virtual void sub_130() override;
    virtual uint64_t sub_138() override;
    virtual void LoadSomeVehiclePhysicsStuff(void *) override;

// new virtuals

    // returns 0
    virtual uint64_t sub_148();
    // returns 0
    virtual uint64_t sub_150();
    virtual void sub_158();
    virtual void GetWheelUnk90();
    // returns 0
    virtual void sub_168();
    // returns 0
    virtual void sub_170();
    // empty
    virtual void sub_178();
    virtual void VehiclePhysicsUpdate();
    virtual void sub_188();
    // throw error
    virtual void sub_190();
    virtual void UpdateVehicleLinearVelocityStuff();
    virtual void UpdateVehRotW();
    // returns 1f
    virtual void sub_1A8();

    uint32_t unkD0;
    Vector4 unkD4Position;
    float turnRate;
    uint32_t unkE8;
    uint32_t unkEC;
    float wheelTurningThing;
    uint8_t unkF4;
    uint8_t unkF5;
    uint8_t unkF6;
    uint8_t unkF7;
    vehicle::BaseObject* parent2;
    physics::VehiclePhysicsInsert1 wheel1;
    physics::VehiclePhysicsInsert1 wheel2;
    physics::VehiclePhysicsInsert1 wheel3;
    physics::VehiclePhysicsInsert1 wheel4;
    uint32_t wheelCount;
    uint32_t unk5C4[3];
    physics::VehiclePhysicsInsert2 insert1;
    physics::VehiclePhysicsInsert2 insert2;
    physics::VehiclePhysicsInsert2 insert3;
    physics::VehiclePhysicsInsert2 insert4;
    uint8_t insertCount;
    uint8_t unkB91;
    uint8_t unkB92;
    uint8_t unkB93;
    uint32_t unkB94[6];
    float antiSwaybarDampingScalor;
    float turningRollFactor;
    float turningRollFactorWeakContactMul;
    float turningRollFactorWeakContactThresholdMin;
    float turningRollFactorWeakContactThresholdMax;
    float maxWheelTurnDeg;
    float wheelTurnMaxAddPerSecond;
    float wheelTurnMaxSubPerSecond;
    uint8_t useAlternativeTurnUpdate;
    uint8_t unkBCD;
    uint8_t unkBCE;
    uint8_t unkBCF;
    float turnUpdateBaseSpeedThreshold;
    float turnUpdateMaxSpeedThreshold;
    float turnUpdateMaxSpeedTurnChangeMul;
    float turnUpdateMaxSpeedTurnMul;
    float turnUpdateInputDiffForSlowChange;
    float turnUpdateInputDiffForFastChange;
    float turnUpdateInputFastChangeSpeed;
    float turnUpdateInputSlowChangeSpeed;
    float turnUpdateInputDiffProgressionPow;
    float airResistanceFactor;
    float brakingFrictionFactor;
    float lowVelStoppingDeceleration;
    float handbrakeBrakingTorque;
    float forwardWeightTransferFactor;
    float sideWeightTransferFactor;
    float smoothWheelContactIncreseTime;
    float smoothWheelContactDecreseTime;
    uint32_t wheelsFrictionMap;
    uint32_t unkC18;
    float slipAngleCurveScale;
    float slipAngleMinSpeedThreshold;
    float slipRatioCurveScale;
    float slipRatioMinSpeedThreshold;
    float slopeTractionReductionBegin;
    float slopeTractionReductionMax;
    float slopeTractionReductionFactor;
    float unkC38;
    float unkC3C;
    Vector4 unkC40;
    Matrix unkC50;
    Matrix unkC90;
    uint32_t unkCD0[4];
    uint32_t wheelsNeedUpdate;
    uint32_t unkCE4;
    DynArray<uintptr_t> driveHelpers;
    Handle<void> curveSet;
    uint64_t stuckTimeout;
    float* transformStruct;
    uint64_t unkD18;
    BaseObject* parent3;
};
#pragma pack(pop)
RED4EXT_ASSERT_OFFSET(WheeledPhysics, driveHelpers, 0xCE8);
RED4EXT_ASSERT_SIZE(WheeledPhysics, 0xD28);

struct CarPhysics : WheeledPhysics
{
    static constexpr const char* NAME = "vehicleCarPhysics";
    static constexpr const char* ALIAS = NAME;
    static constexpr const uintptr_t VFT_RVA = 0x3431C10;

// overrides

    virtual uint64_t Destruct(char) override;
    virtual uint64_t Create(vehicle::BaseObject *) override;
    // virtual uint64_t sub_10() override;
    // virtual uint64_t sub_18() override;
    // virtual uint64_t VehiclePhysicsUnkChassisComponent_0() override;
    // virtual uint64_t j_VP_UpdateWorldTransform() override;
    virtual uint64_t sub_30() override;
    // animation update
    virtual void sub_38(float deltaTime) override;
    // animation update
    virtual void sub_40(float deltaTime) override;
    // virtual uint64_t FixedUpdate_PreSolve(uint64_t, float) override;
    // virtual uint64_t sub_50() override;
    // virtual uint64_t sub_58(float deltaTime) override;
    // virtual void sub_60() override;
    virtual uint64_t sub_68(float) override;
    // virtual uint64_t sub_70(int, char) override;
    virtual uint64_t UpdatePhysicsWT2() override;
    virtual void sub_80() override;
    // virtual void sub_88() override;
    // set is car
    virtual void SetUnk70To1() override;
    virtual void sub_98() override;
    virtual uint64_t sub_A0(uint64_t) override;
    // virtual uint64_t IntializeVectorQuaternion(uint64_t) override;
    // virtual uint64_t sub_B0(int, float) override;
    // virtual bool UpdatePhysicsStuff() override;
    // virtual bool IsInAirFromVehicle() override;
    // virtual bool SomethingOrientationIsInAir() override;
    // virtual void sub_D0() override;
    // virtual void sub_D8(char) override;
    // virtual double Return1D() override;
    // virtual float Return1F() override;
    // virtual void sub_F0() override;
    // virtual void sub_F8() override;
    // virtual void sub_100() override;
    // virtual void sub_108() override;
    // virtual void sub_110() override;
    // virtual void sub_118() override;
    virtual uint64_t UpdatePhysicsWT3() override;
    virtual uint64_t sub_128() override;
    // virtual void sub_130() override;
    // virtual uint64_t sub_138() override;
    virtual void LoadSomeVehiclePhysicsStuff(void *) override;
    virtual uint64_t sub_148() override;
    virtual uint64_t sub_150() override;
    virtual void sub_158() override;
    // virtual void GetWheelUnk90() override;
    // is rear wheel maybe
    virtual void sub_168() override;
    // also rear wheel maybe
    virtual void sub_170() override;
    // virtual void sub_178() override;
    virtual void VehiclePhysicsUpdate() override;
    // update steering
    virtual void sub_188() override;
    // update wheel blackbords
    virtual void sub_190() override;
    // virtual void UpdateVehicleLinearVelocityStuff() override;
    // virtual void UpdateVehRotW() override;
    // get insert pointers
    virtual void sub_1A8() override;

    // 1.52 RVA: 0x1D09090 / 30445712
    /// @pattern 48 89 5C 24 08 57 48 83 EC 20 BA 04 00 00 00 48 8B D9 E8 C9 4A 00 00 48 8D 05 62 8B 72 01 33 FF
    CarPhysics* __fastcall InitializeCar();

    // 1.52 RVA: 0x1D0C290 / 30458512
    /// @pattern 48 89 5C 24 18 56 48 81 EC D0 00 00 00 48 8B F1 0F 29 B4 24 C0 00 00 00 48 8B 89 20 0D 00 00 BA
    int64_t __fastcall AnimationUpdate(float);

    PID bankBodyFBPID;
    PID bankBodyLRPID;
    float bankBodyFBTanMultiplier;
    float bankBodyLRTanMultiplier;
    float differentialOvershootFactor;
    float perfectSteeringFactor;
    float affectsTurnX;
    float affectsTurnX_asWell;
    float veh_curr_turn_rate;
    float veh_curr_turn_input;
    float veh_bank_body_f_b;
    float veh_bank_body_l_r;
    float unkD90;
    float minLongSlipRatioMaybe;
    float unkD98[3];
    float swaybarLengthScalarMaybe;
    float minLongFrictionCoefMaybe;
    float unkDAC[5];
    WorldTransform wt1;
    WorldTransform wt2;
    WorldTransform wt3;
    WorldTransform wt4;
    Quaternion unkE40;
    Quaternion unkE50;
    float unkE60_V568_E8;
    float unkE64;
    float unkE68;
    float unkE6C;
    uint8_t unkE70;
    uint8_t unkE71;
    uint8_t unkE72;
    uint8_t unkE73;
    uint8_t positionNeedsUpdate;
    uint8_t unkE75[3];
    uint64_t unkE78;
};
RED4EXT_ASSERT_OFFSET(CarPhysics, unkE78, 0xE78);

struct BikePhysics : WheeledPhysics
{
    static constexpr const char* NAME = "vehicleBikePhysics";
    static constexpr const char* ALIAS = NAME;
    static constexpr const uintptr_t VFT_RVA = 0x3431A30;

    // 1.52 RVA: 0x1D04210 / 30425616
    /// @pattern 48 89 5C 24 08 57 48 83 EC 20 BA 02 00 00 00 48 8B D9 E8 49 99 00 00 33 FF 48 8D 05 00 D8 72 01
    BikePhysics* __fastcall InitializeBike();

    // 1.52 RVA: 0x1D06B00 / 30436096
    static constexpr const uintptr_t AnimationUpdateAddr = 0x1D06B00;
    /// @pattern 48 89 5C 24 10 57 48 83 EC 40 48 8B 81 20 0D 00 00 48 8B D9 F3 0F 10 81 E4 00 00 00 0F 57 05 8D
    __int64 __fastcall AnimationUpdate();

    Handle<void> callbackRelated;
    PID tiltPID;
    float negTurnRate;
    float turnInput;
    bool tiltControlEnabled;
    uint8_t unkD61;
    uint8_t unkD62;
    uint8_t unkD63;
    float customTargetTilt;
    float tiltRelated;
    float tiltRelatedTan;
    float bikeTiltSpeed;
    float bikeTiltReturnSpeed;
    float bikeTiltCustomSpeed;
    float bikeMaxTilt;
};
// RED4EXT_ASSERT_OFFSET(BikePhysics, callbackRelated, 0xD28);


struct TankPhysics : Physics
{
    static constexpr const char* NAME = "vehicleTankPhysics";
    static constexpr const char* ALIAS = NAME;
    static constexpr const uintptr_t VFT_RVA = 0x3432650;
    
    virtual uint64_t Destruct(char) override;
    virtual uint64_t Create(vehicle::BaseObject *) override;
};

} // namespace physics
} // namespace RED4ext

